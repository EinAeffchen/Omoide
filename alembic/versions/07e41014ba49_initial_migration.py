"""Initial migration

Revision ID: 92f7ecebc445
Revises:
Create Date: 2025-08-03 16:56:03.799865

"""

from typing import Sequence, Union

import sqlalchemy as sa
import sqlmodel

from alembic import op
from app.config import settings

# revision identifiers, used by Alembic.
revision: str = "92f7ecebc445"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "blacklist",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("path", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("path"),
    )
    op.create_table(
        "duplicategroup",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "face",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("media_id", sa.Integer(), nullable=False),
        sa.Column("person_id", sa.Integer(), nullable=True),
        sa.Column(
            "thumbnail_path",
            sqlmodel.sql.sqltypes.AutoString(),
            nullable=True,
        ),
        sa.Column("bbox", sa.JSON(), nullable=True),
        sa.Column("embedding", sa.JSON(), nullable=True),
        sa.ForeignKeyConstraint(
            ["media_id"],
            ["media.id"],
        ),
        sa.ForeignKeyConstraint(
            ["person_id"],
            ["person.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "media",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("path", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column(
            "filename", sqlmodel.sql.sqltypes.AutoString(), nullable=False
        ),
        sa.Column(
            "thumbnail_path",
            sqlmodel.sql.sqltypes.AutoString(),
            nullable=True,
        ),
        sa.Column("size", sa.Integer(), nullable=False),
        sa.Column("duration", sa.Float(), nullable=True),
        sa.Column("width", sa.Integer(), nullable=True),
        sa.Column("height", sa.Integer(), nullable=True),
        sa.Column("views", sa.Integer(), nullable=False),
        sa.Column("inserted_at", sa.DateTime(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("faces_extracted", sa.Boolean(), nullable=False),
        sa.Column("embeddings_created", sa.Boolean(), nullable=False),
        sa.Column("ran_auto_tagging", sa.Boolean(), nullable=False),
        sa.Column("extracted_scenes", sa.Boolean(), nullable=False),
        sa.Column("is_favorite", sa.Boolean(), nullable=False),
        sa.Column("embedding", sa.JSON(), nullable=True),
        sa.Column("phash", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("path"),
    )
    op.create_index(
        op.f("ix_blacklist_path"),
        "blacklist",
        ["path"],
        unique=True,
    )
    op.create_index(
        op.f("ix_media_created_at"), "media", ["created_at"], unique=False
    )
    op.create_index(
        op.f("ix_media_embedding"), "media", ["embedding"], unique=False
    )
    op.create_index(
        op.f("ix_media_embeddings_created"),
        "media",
        ["embeddings_created"],
        unique=False,
    )
    op.create_index(
        op.f("ix_media_faces_extracted"),
        "media",
        ["faces_extracted"],
        unique=False,
    )
    op.create_index(
        op.f("ix_media_filename"), "media", ["filename"], unique=False
    )
    op.create_index(
        op.f("ix_media_inserted_at"), "media", ["inserted_at"], unique=False
    )
    op.create_index(op.f("ix_media_phash"), "media", ["phash"], unique=False)
    op.create_index(op.f("ix_media_views"), "media", ["views"], unique=False)
    op.create_table(
        "person",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("age", sa.Integer(), nullable=True),
        sa.Column("gender", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("views", sa.Integer(), nullable=False),
        sa.Column("is_favorite", sa.Boolean(), nullable=False),
        sa.Column("profile_face_id", sa.Integer(), nullable=True),
        sa.Column("appearance_count", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["profile_face_id"],
            ["face.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.execute(f"""
        CREATE VIRTUAL TABLE IF NOT EXISTS media_embeddings
        USING vec0(
            media_id    integer primary key,
            embedding   float[{settings.ai.clip_model_embedding_size}]
        );
    """)
    op.execute("""
        CREATE VIRTUAL TABLE IF NOT EXISTS face_embeddings
        USING vec0(
            face_id     integer primary key,
            person_id   integer,
            embedding   float[512]
        );
    """)
    op.execute("""
        CREATE VIRTUAL TABLE IF NOT EXISTS person_embeddings
        USING vec0(
            person_id   integer,
            embedding   float[512]
        );
    """)
    op.create_index(
        op.f("ix_person_appearance_count"),
        "person",
        ["appearance_count"],
        unique=False,
    )
    op.create_index(
        op.f("ix_person_profile_face_id"),
        "person",
        ["profile_face_id"],
        unique=False,
    )
    op.create_index(op.f("ix_person_views"), "person", ["views"], unique=False)
    op.create_table(
        "processingtask",
        sa.Column("id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column(
            "task_type", sqlmodel.sql.sqltypes.AutoString(), nullable=False
        ),
        sa.Column(
            "status", sqlmodel.sql.sqltypes.AutoString(), nullable=False
        ),
        sa.Column("total", sa.Integer(), nullable=False),
        sa.Column("processed", sa.Integer(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("started_at", sa.DateTime(), nullable=True),
        sa.Column("finished_at", sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_processingtask_status"),
        "processingtask",
        ["status"],
        unique=False,
    )
    op.create_table(
        "tag",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_tag_name"), "tag", ["name"], unique=True)
    op.create_table(
        "duplicatemedia",
        sa.Column("group_id", sa.Integer(), nullable=False),
        sa.Column("media_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["group_id"],
            ["duplicategroup.id"],
        ),
        sa.ForeignKeyConstraint(
            ["media_id"],
            ["media.id"],
        ),
        sa.PrimaryKeyConstraint("group_id", "media_id"),
    )
    op.create_table(
        "exifdata",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("media_id", sa.Integer(), nullable=False),
        sa.Column("make", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("model", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("timestamp", sa.DateTime(), nullable=True),
        sa.Column("iso", sa.Integer(), nullable=True),
        sa.Column(
            "exposure_time", sqlmodel.sql.sqltypes.AutoString(), nullable=True
        ),
        sa.Column(
            "aperture", sqlmodel.sql.sqltypes.AutoString(), nullable=True
        ),
        sa.Column("focal_length", sa.Float(), nullable=True),
        sa.Column("lat", sa.Float(), nullable=True),
        sa.Column("lon", sa.Float(), nullable=True),
        sa.ForeignKeyConstraint(
            ["media_id"],
            ["media.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_exifdata_iso"), "exifdata", ["iso"], unique=False)
    op.create_index(op.f("ix_exifdata_lat"), "exifdata", ["lat"], unique=False)
    op.create_index(op.f("ix_exifdata_lon"), "exifdata", ["lon"], unique=False)
    op.create_index(
        op.f("ix_exifdata_make"), "exifdata", ["make"], unique=False
    )
    op.create_index(
        op.f("ix_exifdata_media_id"), "exifdata", ["media_id"], unique=False
    )
    op.create_index(
        op.f("ix_exifdata_model"), "exifdata", ["model"], unique=False
    )
    op.create_index(
        op.f("ix_exifdata_timestamp"), "exifdata", ["timestamp"], unique=False
    )
    op.create_table(
        "mediataglink",
        sa.Column("media_id", sa.Integer(), nullable=False),
        sa.Column("tag_id", sa.Integer(), nullable=False),
        sa.Column("auto_score", sa.Float(), nullable=True),
        sa.ForeignKeyConstraint(
            ["media_id"],
            ["media.id"],
        ),
        sa.ForeignKeyConstraint(
            ["tag_id"],
            ["tag.id"],
        ),
        sa.PrimaryKeyConstraint("media_id", "tag_id"),
    )
    op.create_table(
        "personsimilarity",
        sa.Column("person_id", sa.Integer(), nullable=False),
        sa.Column("other_id", sa.Integer(), nullable=False),
        sa.Column("similarity", sa.Float(), nullable=False),
        sa.Column("calculated_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["other_id"],
            ["person.id"],
        ),
        sa.ForeignKeyConstraint(
            ["person_id"],
            ["person.id"],
        ),
        sa.PrimaryKeyConstraint("person_id", "other_id"),
    )
    op.create_table(
        "persontaglink",
        sa.Column("person_id", sa.Integer(), nullable=False),
        sa.Column("tag_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["person_id"],
            ["person.id"],
        ),
        sa.ForeignKeyConstraint(
            ["tag_id"],
            ["tag.id"],
        ),
        sa.PrimaryKeyConstraint("person_id", "tag_id"),
    )
    op.create_table(
        "scene",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("media_id", sa.Integer(), nullable=False),
        sa.Column("start_time", sa.Float(), nullable=False),
        sa.Column("end_time", sa.Float(), nullable=False),
        sa.Column(
            "thumbnail_path",
            sqlmodel.sql.sqltypes.AutoString(),
            nullable=True,
        ),
        sa.Column(
            "description", sqlmodel.sql.sqltypes.AutoString(), nullable=True
        ),
        sa.Column("embedding", sa.JSON(), nullable=True),
        sa.ForeignKeyConstraint(
            ["media_id"],
            ["media.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_scene_embedding"), "scene", ["embedding"], unique=False
    )
    op.create_index(
        op.f("ix_scene_media_id"), "scene", ["media_id"], unique=False
    )
    op.create_table(
        "timelineevent",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("title", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column(
            "description", sqlmodel.sql.sqltypes.AutoString(), nullable=True
        ),
        sa.Column("event_date", sa.Date(), nullable=False),
        sa.Column(
            "recurrence", sqlmodel.sql.sqltypes.AutoString(), nullable=True
        ),
        sa.Column("person_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["person_id"],
            ["person.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_timelineevent_title"),
        "timelineevent",
        ["title"],
        unique=False,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_timelineevent_title"), table_name="timelineevent")
    op.drop_table("timelineevent")
    op.drop_index(op.f("ix_scene_media_id"), table_name="scene")
    op.drop_index(op.f("ix_scene_embedding"), table_name="scene")
    op.drop_table("scene")
    op.drop_table("persontaglink")
    op.drop_table("personsimilarity")
    op.drop_table("mediataglink")
    op.drop_index(op.f("ix_exifdata_timestamp"), table_name="exifdata")
    op.drop_index(op.f("ix_exifdata_model"), table_name="exifdata")
    op.drop_index(op.f("ix_exifdata_media_id"), table_name="exifdata")
    op.drop_index(op.f("ix_exifdata_make"), table_name="exifdata")
    op.drop_index(op.f("ix_exifdata_lon"), table_name="exifdata")
    op.drop_index(op.f("ix_exifdata_lat"), table_name="exifdata")
    op.drop_index(op.f("ix_exifdata_iso"), table_name="exifdata")
    op.drop_table("exifdata")
    op.drop_table("duplicatemedia")
    op.drop_index(op.f("ix_tag_name"), table_name="tag")
    op.drop_table("tag")
    op.drop_index(
        op.f("ix_processingtask_status"), table_name="processingtask"
    )
    op.drop_table("processingtask")
    op.drop_index(op.f("ix_person_views"), table_name="person")
    op.drop_index(op.f("ix_person_profile_face_id"), table_name="person")
    op.drop_index(op.f("ix_person_appearance_count"), table_name="person")
    op.drop_table("person")
    op.drop_index(op.f("ix_media_views"), table_name="media")
    op.drop_index(op.f("ix_media_phash"), table_name="media")
    op.drop_index(op.f("ix_media_inserted_at"), table_name="media")
    op.drop_index(op.f("ix_media_filename"), table_name="media")
    op.drop_index(op.f("ix_media_faces_extracted"), table_name="media")
    op.drop_index(op.f("ix_media_embeddings_created"), table_name="media")
    op.drop_index(op.f("ix_media_embedding"), table_name="media")
    op.drop_index(op.f("ix_media_created_at"), table_name="media")
    op.drop_table("media")
    op.drop_table("face")
    op.drop_table("duplicategroup")
    op.drop_table("blacklist")
    op.execute("DROP TABLE IF EXISTS person_embeddings;")
    op.execute("DROP TABLE IF EXISTS face_embeddings;")
    op.execute("DROP TABLE IF EXISTS media_embeddings;")
    # ### end Alembic commands ###
