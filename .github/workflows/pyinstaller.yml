name: Build with PyInstaller

permissions:
  contents: write

on:
  workflow_dispatch:
  push:
    branches: [ main, master, env-to-config-file-update ]
    tags: [ 'v*' ]
  pull_request:

jobs:
  build:
    name: Build ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest] #, macos-latest]
        python-version: [ '3.12' ]
        node-version: [ '20' ]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Build frontend
        working-directory: frontend
        run: |
          npm ci
          npm run build

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Compute version
        shell: bash
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            VERSION="${GITHUB_REF_NAME#v}"
          else
            BASE=$(python -c "import tomllib;import sys;print(tomllib.load(open('pyproject.toml','rb'))['project']['version'])")
            SHA=$(git rev-parse --short HEAD)
            VERSION="${BASE}+${SHA}"
          fi
          SAFE_VERSION=$(printf '%s' "${VERSION}" | tr -c '[:alnum:]._-' '_')
          echo "APP_VERSION=${VERSION}" >> $GITHUB_ENV
          echo "OMOIDE_VERSION=${VERSION}" >> $GITHUB_ENV
          echo "APP_VERSION_SAFE=${SAFE_VERSION}" >> $GITHUB_ENV

      - name: Linux dependencies (Qt / WebEngine)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          set -euo pipefail
          sudo apt-get update
          sudo apt-get install -y \
            libnss3 libxss1 libxtst6 libxrandr2 \
            libxcb1 libxkbcommon0 libxkbcommon-x11-0 \
            libxcomposite1 libxdamage1 libxfixes3 \
            libglib2.0-0 libdbus-1-3 libegl1 libopengl0 \
            libdrm2 libgbm1 libxshmfence1 libxrender1 \
            libx11-xcb1 fontconfig || true
          # Handle renamed package on newer Ubuntu
          sudo apt-get install -y libasound2 || sudo apt-get install -y libasound2t64

      - name: Install Python dependencies
        shell: bash
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip wheel
          # Preinstall CPU torch/torchvision to avoid GPU wheels
          python -m pip install --extra-index-url https://download.pytorch.org/whl/cpu torch>=2.8.0 torchvision>=0.23.0
          # Install remaining project dependencies (excluding torch/vision)
          python -m pip install -r requirements-ci.txt

      - name: Set artifact metadata
        shell: bash
        run: |
          VERSION_SAFE=${APP_VERSION_SAFE:-$APP_VERSION}
          BASENAME="omoide-${VERSION_SAFE}"
          OS_SUFFIX="${RUNNER_OS,,}"
          echo "APP_NAME=${BASENAME}" >> $GITHUB_ENV
          echo "APP_ARTIFACT_PATH=dist/${BASENAME}" >> $GITHUB_ENV
          echo "APP_ARTIFACT_ARCHIVE=dist/${BASENAME}-${OS_SUFFIX}.zip" >> $GITHUB_ENV

      - name: Show dependency versions (debug)
        run: |
          python -V
          pip list

      - name: Clean previous build artifacts
        run: python -c "import shutil, pathlib; [shutil.rmtree(pathlib.Path(p), ignore_errors=True) for p in ('build','dist')]"

      - name: Force clean build artifacts
        if: runner.os == 'macOS'
        run: |
          rm -rf build dist

      - name: Build binary with PyInstaller (macOS workaround)
        env:
          APP_VERSION: ${{ env.APP_VERSION }}
          OMOIDE_VERSION: ${{ env.OMOIDE_VERSION }}
        if: runner.os == 'macOS'
        run: |
          export PYINSTALLER_STRIP_SYMLINKS=1
          pyinstaller --clean --noconfirm main.spec

      - name: Build binary with PyInstaller
        if: runner.os != 'macOS'
        env:
          APP_VERSION: ${{ env.APP_VERSION }}
          OMOIDE_VERSION: ${{ env.OMOIDE_VERSION }}
        run: |
          pyinstaller --clean --noconfirm main.spec

      - name: Bundle VC runtime (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        env:
          APP_ARTIFACT_PATH: ${{ env.APP_ARTIFACT_PATH }}
        run: |
          $ErrorActionPreference = 'Stop'
          $bundleScript = @'
          import os
          import pathlib
          import shutil

          try:
              import sklearn  # type: ignore
          except ImportError:
              sklearn = None

          dist_root = pathlib.Path(os.environ['APP_ARTIFACT_PATH']).resolve()
          target_dir = dist_root / '_internal' / 'sklearn' / '.libs'
          target_dir.mkdir(parents=True, exist_ok=True)

          candidates = []
          if sklearn is not None:
              libs_dir = pathlib.Path(sklearn.__file__).resolve().parent / '.libs'
              if libs_dir.exists():
                  candidates.extend(libs_dir.glob('vcomp140*.dll'))

          if not candidates:
              system_root = pathlib.Path(os.environ.get('SystemRoot', r'C\Windows'))
              for rel in ('System32', 'SysWOW64'):
                  candidate = system_root / rel / 'vcomp140.dll'
                  if candidate.exists():
                      candidates.append(candidate)
                      break

          if not candidates:
              raise SystemExit('Unable to locate vcomp140.dll for bundling.')

          src = pathlib.Path(candidates[0])
          dest = target_dir / 'vcomp140.dll'
          shutil.copy2(src, dest)
          print(f'Copied {src} -> {dest}')
          '@
          $tempPath = Join-Path $env:RUNNER_TEMP 'bundle_vcomp_runtime.py'
          Set-Content -Path $tempPath -Value $bundleScript -Encoding UTF8
          python $tempPath

      - name: Package artifact archive
        shell: pwsh
        env:
          APP_ARTIFACT_PATH: ${{ env.APP_ARTIFACT_PATH }}
          APP_ARTIFACT_ARCHIVE: ${{ env.APP_ARTIFACT_ARCHIVE }}
        run: |
          $ErrorActionPreference = 'Stop'
          $packageScript = @'
          import os
          import pathlib
          import shutil

          src = pathlib.Path(os.environ['APP_ARTIFACT_PATH']).resolve()
          archive = pathlib.Path(os.environ['APP_ARTIFACT_ARCHIVE']).resolve()
          archive.parent.mkdir(parents=True, exist_ok=True)
          if archive.exists():
              archive.unlink()
          base = archive.with_suffix('')
          shutil.make_archive(str(base), 'zip', root_dir=src.parent, base_dir=src.name)
          print(f'Created archive at {archive}')
          '@
          $tempPath = Join-Path $env:RUNNER_TEMP 'package_artifact.py'
          Set-Content -Path $tempPath -Value $packageScript -Encoding UTF8
          python $tempPath

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: omoide-${{ runner.os }}-${{ env.APP_VERSION }}
          path: ${{ env.APP_ARTIFACT_ARCHIVE }}
          if-no-files-found: error

  release:
    if: startsWith(github.ref, 'refs/tags/')
    needs: [ build ]
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/**
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
