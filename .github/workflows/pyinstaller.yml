name: Build with PyInstaller

permissions:
  contents: write

on:
  workflow_dispatch:
  push:
    branches: [ main, master, env-to-config-file-update ]
    tags: [ 'v*' ]
  pull_request:

jobs:
  build:
    name: Build ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: [ '3.12' ]
        node-version: [ '20' ]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Build frontend
        working-directory: frontend
        run: |
          npm ci
          npm run build

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Compute version
        shell: bash
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            VERSION="${GITHUB_REF_NAME#v}"
          else
            BASE=$(python - <<'PY'
import tomllib
with open('pyproject.toml','rb') as f:
    print(tomllib.load(f)['project']['version'])
PY
)
            SHA=$(git rev-parse --short HEAD)
            VERSION="${BASE}+${SHA}"
          fi
          echo "APP_VERSION=${VERSION}" >> $GITHUB_ENV

      - name: Linux dependencies (Qt / WebEngine)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          set -euo pipefail
          sudo apt-get update
          pkgs=(
            libnss3 libxss1 libxtst6 libxrandr2 
            libxcb1 libxkbcommon0 libxkbcommon-x11-0 
            libxcomposite1 libxdamage1 libxfixes3 
            libglib2.0-0 libdbus-1-3 libegl1 libopengl0 
            libdrm2 libgbm1 libxshmfence1 libxrender1 
            libx11-xcb1 fontconfig
          )
          if apt-cache show libasound2 >/dev/null 2>&1; then
            pkgs+=(libasound2)
          else
            pkgs+=(libasound2t64)
          fi
          sudo apt-get install -y "${pkgs[@]}"

      - name: Install Python dependencies
        shell: bash
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip wheel
          # Preinstall CPU wheels for torch/vision to avoid GPU builds and speed up
          python -m pip install --extra-index-url https://download.pytorch.org/whl/cpu torch>=2.8.0 torchvision>=0.23.0
          # Generate requirements from pyproject and exclude torch/vision to avoid reinstall
          python - <<'PY' > requirements-ci.txt
import tomllib
deps = tomllib.load(open('pyproject.toml','rb'))['project']['dependencies']
skip = ('torch', 'torchvision')
for d in deps:
    if not d.strip():
        continue
    name = d.split('==')[0].split('>=')[0].split('>')[0].split('<')[0].strip()
    if any(name == s or name.startswith(s + '[') for s in skip):
        continue
    print(d)
PY
          python -m pip install -r requirements-ci.txt

      - name: Set output filename per OS
        shell: bash
        run: |
          BASENAME="Smol-${APP_VERSION}"
          case "${RUNNER_OS}" in
            Windows)
              echo "APP_BASENAME=${BASENAME}.exe" >> $GITHUB_ENV ;;
            macOS)
              echo "APP_BASENAME=${BASENAME}" >> $GITHUB_ENV ;;
            Linux)
              echo "APP_BASENAME=${BASENAME}" >> $GITHUB_ENV ;;
          esac

      - name: Show dependency versions (debug)
        run: |
          python -V
          pip list

      - name: Build binary with PyInstaller
        env:
          APP_VERSION: ${{ env.APP_VERSION }}
        run: |
          pyinstaller --clean --noconfirm main.spec

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: smol-${{ runner.os }}-${{ env.APP_VERSION }}
          path: dist/${{ env.APP_BASENAME }}
          if-no-files-found: error

  release:
    if: startsWith(github.ref, 'refs/tags/')
    needs: [ build ]
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/**
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
