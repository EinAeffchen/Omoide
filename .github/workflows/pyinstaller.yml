name: Build with PyInstaller

on:
  workflow_dispatch:
  push:
    branches: [ main, master, env-to-config-file-update ]
    tags: [ 'v*' ]
  pull_request:

jobs:
  build:
    name: Build ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: [ '3.12' ]
        node-version: [ '20' ]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Build frontend
        working-directory: frontend
        run: |
          npm ci
          npm run build

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Linux dependencies (Qt / WebEngine)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          # Core libs frequently needed by PySide6 / QtWebEngine runtime
          sudo apt-get install -y \
            libnss3 libasound2 libxss1 libxtst6 libxrandr2 \
            libxcb1 libxkbcommon0 libxkbcommon-x11-0 \
            libxcomposite1 libxdamage1 libxfixes3 \
            libglib2.0-0 libdbus-1-3 libegl1 libopengl0 \
            libdrm2 libgbm1 libxshmfence1 libxrender1 \
            libx11-xcb1 fontconfig

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip wheel
          # Preinstall CPU wheels for torch/vision to speed up and avoid GPU builds
          python -m pip install --extra-index-url https://download.pytorch.org/whl/cpu \
            "torch>=2.8.0" "torchvision>=0.23.0"
          # Install the project and its dependencies declared in pyproject.toml
          python -m pip install .

      - name: Show dependency versions (debug)
        run: |
          python -V
          pip list

      - name: Build binary with PyInstaller
        run: |
          pyinstaller --clean --noconfirm main.spec

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: smol-${{ runner.os }}-${{ github.ref_name }}
          path: dist/Smol
          if-no-files-found: error

  release:
    if: startsWith(github.ref, 'refs/tags/')
    needs: [ build ]
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/**
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

